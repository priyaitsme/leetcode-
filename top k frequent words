python

class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        d = collections.defaultdict(int)
        for word in words:
            d[word] +=1

        queue = []

        for word, count in d.items():
            heapq.heappush(queue, Element(count, word))
            if len(queue) > k:
                heapq.heappop(queue)

        return [heapq.heappop(queue).word for _ in range(k)][::-1]


class Element(object):
    def __init__(self, count, word):
        self.word = word
        self.count = count

    def __lt__(self, other):
        if self.count == other.count:
            return self.word > other.word
        return self.count < other.count

    def __eq__ (self, other):
        return self.count == other.count and self.word == other.word
